show dbs
mongoAssignment1    8.00 KiB
admin             336.00 KiB
local               3.23 GiB
db.movies.insertMany
[Function: insertMany] AsyncFunction {
  apiVersions: [ 1, Infinity ],
  serverVersions: [ '3.2.0', '999.999.999' ],
  returnsPromise: true,
  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],
  returnType: { type: 'unknown', attributes: {} },
  deprecated: false,
  platforms: [ 0, 1, 2 ],
  isDirectShellCommand: false,
  acceptsRawInput: false,
  shellCommandCompleter: undefined,
  help: [Function (anonymous)] Help
}
db.movies.insertMany([{}])
{ acknowledged: true,
  insertedIds: { '0': ObjectId("628c73416387fffdf47d526b") } }
use mongoAssignment1
'switched to db mongoAssignment1'
db.movies.insertMany([{}])
{ acknowledged: true,
  insertedIds: { '0': ObjectId("628c752d6387fffdf47d526c") } }
db.movies.find({})
{ _id: ObjectId("628c752d6387fffdf47d526c") }
show databases
mongoAssignment1   40.00 KiB
test               40.00 KiB
admin             336.00 KiB
local               3.23 GiB
db.movies.find({})
{ _id: ObjectId("628c752d6387fffdf47d526c") }
db.movies.insertMany([{title:"Fight Club",writer:"Chuck Palahniuko",year:1999,actors:["Brad Pitt","Edward Norton"]},{title:"Pulp Fiction",writer:"Quentin Tarantino",year:1994,actors:["John Travolta","Uma Thurman"]},{title:"Inglorious Basterds",written:"Quentin Tarantino",year:2009,actors:["Brad Pitt","Diane Kruger","Eli Roth"]},{title:"The Hobbit:An Unexpected Journey",writer:"J.R.R. Tolkein",year:2012,franchise:"The Hobbit"},{title:"The Hobbit:The Desolation of Smaug",writer:"J.R.R. Tolkein",year:2013,franchise:"The Hobbit"},{title:"The Hobbit:The Battle of the Five Armies",writer:"J.R.R. Tolkein",year:2012,franchise:"The Hobbit",synopsis:"Bibo and Company are forced to engage in a war against an array of combatanta and keep the Lonely Mountain from falling into the hands of a rising darkness."},{title:"Pee Wee Herman's Big Adventure"},{title:"Avatar"}])
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("61b85d45fe9204d66eef8244"),
     '1': ObjectId("61b85d45fe9204d66eef8245"),
     '2': ObjectId("61b85d45fe9204d66eef8246"),
     '3': ObjectId("61b85d45fe9204d66eef8247"),
     '4': ObjectId("61b85d45fe9204d66eef8248"),
     '5': ObjectId("61b85d45fe9204d66eef8249"),
     '6': ObjectId("61b85d45fe9204d66eef824a"),
     '7': ObjectId("61b85d45fe9204d66eef824b") } }
db.movies.find({})
{ _id: ObjectId("61b84c17fe9204d66eef8243") }
{ _id: ObjectId("61b85d45fe9204d66eef8244"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("61b85d45fe9204d66eef8245"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
{ _id: ObjectId("61b85d45fe9204d66eef8246"),
  title: 'Inglorious Basterds',
  written: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }
{ _id: ObjectId("61b85d45fe9204d66eef8247"),
  title: 'The Hobbit:An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit' }
{ _id: ObjectId("61b85d45fe9204d66eef8248"),
  title: 'The Hobbit:The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("61b85d45fe9204d66eef8249"),
  title: 'The Hobbit:The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bibo and Company are forced to engage in a war against an array of combatanta and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
{ _id: ObjectId("61b85d45fe9204d66eef824a"),
  title: 'Pee Wee Herman\'s Big Adventure' }
{ _id: ObjectId("61b85d45fe9204d66eef824b"), title: 'Avatar' }
db.movies.aggregate([{"$match":{writer:"Quentin Tarantino"}}])
{ _id: ObjectId("61b85d45fe9204d66eef8245"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
db.movies.aggregate([{"$match":{actors:"Brad Pitt"}}])
{ _id: ObjectId("61b85d45fe9204d66eef8244"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("61b85d45fe9204d66eef8246"),
  title: 'Inglorious Basterds',
  written: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }
db.movies.aggregate([{"$match":{franchise:"The Hobbit"}}])
{ _id: ObjectId("61b85d45fe9204d66eef8247"),
  title: 'The Hobbit:An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit' }
{ _id: ObjectId("61b85d45fe9204d66eef8248"),
  title: 'The Hobbit:The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("61b85d45fe9204d66eef8249"),
  title: 'The Hobbit:The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bibo and Company are forced to engage in a war against an array of combatanta and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
db.movies.aggregate([{"$match":{year:{$lte:2000}}}])
}])
SyntaxError: Unexpected token (2:0)

  1 | db.movies.aggregate([{"$match":{year:{$lte:2000}}}])
> 2 | }])
    | ^
db.movies.aggregate([{"$match":{year:{$lte:2000}}}])
{ _id: ObjectId("61b85d45fe9204d66eef8244"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("61b85d45fe9204d66eef8245"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
db.movies.find({$or:[{year:{$lte:2000}},{year:{$gte:2010}}]})
{ _id: ObjectId("61b85d45fe9204d66eef8244"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("61b85d45fe9204d66eef8245"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
{ _id: ObjectId("61b85d45fe9204d66eef8247"),
  title: 'The Hobbit:An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit' }
{ _id: ObjectId("61b85d45fe9204d66eef8248"),
  title: 'The Hobbit:The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("61b85d45fe9204d66eef8249"),
  title: 'The Hobbit:The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
 synopsis: 'Bibo and Company are forced to engage in a war against an array of combatanta and keep the Lonely Mountain from falling into the hands of a rising darkness.' }

Update query:

db.movies.update({title:"The Hobbit:An Unexpected Journey"},{$set:{synopsis:"A reluctant hobbit,Bilbo Baggins,sets out to the lonely mountain with a spirited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug."}})
'DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.'
{ acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0 }
db.movies.update({title:"Pulp Fiction"},{$set:{actors:"Sameul L.Jalson"}})
{ acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0 }
db.movies.update({title:"The Desolation of Smaug"},{$set:{synopsis:"The dwarves,along with Bibo Baggins and Gandalf the Grey,continue their quest to reclaim Erebor,their homeland,from Smaug Bilbo Baggins is in possession of a mysterious and magical ring."}})
{ acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0 }

Text Search:

db.movies.createIndex({synopsis:"text"})
'synopsis_text'
db.movies.find({$search:"Bilbo"}},{_id:0,"synopsis":1})
SyntaxError: Unexpected token, expected "," (1:32)

> 1 | db.movies.find({$search:"Bilbo"}},{_id:0,"synopsis":1})
    |                                 ^
db.movies.find({$text:{$search:"Bilbo"}},{_id:0,"synopsis":1})
{ synopsis: 'A reluctant hobbit,Bilbo Baggins,sets out to the lonely mountain with a spirited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug.' }
db.movies.find({$text:{$search:"Gandalf"}},{_id:0,"synopsis":1})
db.movies.find({$and:[{{$text:{$search:"Gandalf"},{_id:0,"synopsis":1}}},{{$text:{$search:"Bilbo"}},{_id:0,"synopsis":1}})
SyntaxError: Unexpected token (1:23)

> 1 | db.movies.find({$and:[{{$text:{$search:"Gandalf"},{_id:0,"synopsis":1}}},{{$text:{$search:"Bilbo"}},{_id:0,"synopsis":1}})
    |                        ^
db.movies.find({$and:[{{$text:{$search:"Gandalf"},{_id:0,"synopsis":1}}},{{$text:{$search:"Bilbo"}},{_id:0,"synopsis":1}}})
SyntaxError: Unexpected token (1:23)

> 1 | db.movies.find({$and:[{{$text:{$search:"Gandalf"},{_id:0,"synopsis":1}}},{{$text:{$search:"Bilbo"}},{_id:0,"synopsis":1}}})
    |                        ^
db.movies.aggregate([{$match:{$text:{$search:"dwarves hobbit"}}}])
{ _id: ObjectId("61b85d45fe9204d66eef8247"),
  title: 'The Hobbit:An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit,Bilbo Baggins,sets out to the lonely mountain with a spirited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug.' }
db.movies.aggregate([{$match:{$text:{$search:"gold dragon"}}}])
{ _id: ObjectId("61b85d45fe9204d66eef8247"),
  title: 'The Hobbit:An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit,Bilbo Baggins,sets out to the lonely mountain with a spirited group of dwarves to reclaim their mountain home-and the gold within it-from the dragon Smaug.' }
Delete:

db.movies.deleteOne({title:"Avatar"})
{ acknowledged: true, deletedCount: 1 }
db.movies.deleteOne({title:"Pee Wee Herman's Big Adventur"})
{ acknowledged: true, deletedCount: 0 }

Users Collection:

db.users.insertMany([{username:"GoodGuyGreg",first_name:"GoodGuy",last_name:"Gerg"},{username:"ScumbagSteve",full_name:["first:Scumbag","last:steve"]}])
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("61b87209fe9204d66eef824c"),
     '1': ObjectId("61b87209fe9204d66eef824d") } }
db.users.find()
{ _id: ObjectId("61b87209fe9204d66eef824c"),
  username: 'GoodGuyGreg',
  first_name: 'GoodGuy',
  last_name: 'Gerg' }
{ _id: ObjectId("61b87209fe9204d66eef824d"),
  username: 'ScumbagSteve',
  full_name: [ 'first:Scumbag', 'last:steve' ] }
db.posts.insertMany([{username:"GoodGuyGreg",title:"Passes out at party",body:"Wakes up early and cleans house"},{username:"GoodGuyGreg",title:"Reports a bug in your code",body:"Sends you a pull request"},{username:"ScumbagSteve",title:"Borrows something",body:"Sells it"},{username:"ScumbagSteve",title"Borrows everything",body:"The end"},{username:"ScumbagSteve",title:"Forks your repo on Github",body:"Sets to private"}])
db.posts.find()
db.posts.find({$username:{$search:"GoodGuyGerg"}})
db.posts.find({$username:{$search:"ScumbagSteve"}})
db.posts.find({"username":"ScumbagSteve"}).pretty()
db.comments.find()
db.comments.find().pretty()
db.comments.find({"username":"GoodGuyGreg"}).pretty()
db.comments.find({"username":"ScumbagSteve"}).pretty()
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);
db.comments.insertMany([
{
username: "GoodGuyGreg",
comment: "Hope you got a good deal!",
post: ObjectId("5f44d3a148197d7749864def")
},
{
username: "GoodGuyGreg",
comment: "Don't violate the licensing agreement!",
post: ObjectId("5f44d3a148197d7749864df0")
},
{
username: "GoodGuyGreg",
comment: "Don't violate the licensing agreement!",
post: ObjectId("5f44d3a148197d7749864df1")
},
{
username: "ScumbagSteve",
comment: "It still isn't clean",
post: ObjectId("5f44d3a148197d7749864dec")
},
{
username: "ScumbagSteve",
comment: "Denied your PR cause I found a hack",
post: ObjectId("5f44d3a148197d7749864dee")
Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
db.movies.insertMany([{title:"Fight Club",writer:"Chuck Palahniuko",year:1999,actors:["Brad Pitt","Edward Norton"]},{title:"Pulp Fiction",writer:"Quentin Tarantino",year:1994,actors:["John Travolta","Uma Thurman"]},{title:"Inglorious Basterds",written:"Quentin Tarantino",year:2009,actors:["Brad Pitt","Diane Kruger","Eli Roth"]},{title:"The Hobbit:An Unexpected Journey",writer:"J.R.R. Tolkein",year:2012,franchise:"The Hobbit"},{title:"The Hobbit:The Desolation of Smaug",writer:"J.R.R. Tolkein",year:2013,franchise:"The Hobbit"},{title:"The Hobbit:The Battle of the Five Armies",writer:"J.R.R. Tolkein",year:2012,franchise:"The Hobbit",synopsis:"Bibo and Company are forced to engage in a war against an array of combatanta and keep the Lonely Mountain from falling into the hands of a rising darkness."},{title:"Pee Wee Herman's Big Adventure"},{title:"Avatar"}])
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("628c781a6387fffdf47d526d"),
     '1': ObjectId("628c781a6387fffdf47d526e"),
     '2': ObjectId("628c781a6387fffdf47d526f"),
     '3': ObjectId("628c781a6387fffdf47d5270"),
     '4': ObjectId("628c781a6387fffdf47d5271"),
     '5': ObjectId("628c781a6387fffdf47d5272"),
     '6': ObjectId("628c781a6387fffdf47d5273"),
     '7': ObjectId("628c781a6387fffdf47d5274") } }
db.movies.find({})
{ _id: ObjectId("628c752d6387fffdf47d526c") }
{ _id: ObjectId("628c781a6387fffdf47d526d"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("628c781a6387fffdf47d526e"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
{ _id: ObjectId("628c781a6387fffdf47d526f"),
  title: 'Inglorious Basterds',
  written: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }
{ _id: ObjectId("628c781a6387fffdf47d5270"),
  title: 'The Hobbit:An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit' }
{ _id: ObjectId("628c781a6387fffdf47d5271"),
  title: 'The Hobbit:The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("628c781a6387fffdf47d5272"),
  title: 'The Hobbit:The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bibo and Company are forced to engage in a war against an array of combatanta and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
{ _id: ObjectId("628c781a6387fffdf47d5273"),
  title: 'Pee Wee Herman\'s Big Adventure' }
{ _id: ObjectId("628c781a6387fffdf47d5274"), title: 'Avatar' }
db.movies.aggregate([{"$match":{writer:"Quentin Tarantino"}}])
{ _id: ObjectId("628c781a6387fffdf47d526e"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
db.movies.aggregate([{"$match":{actors:"Brad Pitt"}}])
{ _id: ObjectId("628c781a6387fffdf47d526d"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("628c781a6387fffdf47d526f"),
  title: 'Inglorious Basterds',
  written: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }
db.movies.aggregate([{"$match":{franchise:"The Hobbit"}}])
{ _id: ObjectId("628c781a6387fffdf47d5270"),
  title: 'The Hobbit:An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit' }
{ _id: ObjectId("628c781a6387fffdf47d5271"),
  title: 'The Hobbit:The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("628c781a6387fffdf47d5272"),
  title: 'The Hobbit:The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bibo and Company are forced to engage in a war against an array of combatanta and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
db.movies.aggregate([{"$match":{year:{$lte:2000}}}])
{ _id: ObjectId("628c781a6387fffdf47d526d"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("628c781a6387fffdf47d526e"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
db.movies.aggregate([{"$match":{year:{$lte:2000}}}])
{ _id: ObjectId("628c781a6387fffdf47d526d"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("628c781a6387fffdf47d526e"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
db.movies.find({$or:[{year:{$lte:2000}},{year:{$gte:2010}}]})
{ _id: ObjectId("628c781a6387fffdf47d526d"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("628c781a6387fffdf47d526e"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
{ _id: ObjectId("628c781a6387fffdf47d5270"),
  title: 'The Hobbit:An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit' }
{ _id: ObjectId("628c781a6387fffdf47d5271"),
  title: 'The Hobbit:The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("628c781a6387fffdf47d5272"),
  title: 'The Hobbit:The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bibo and Company are forced to engage in a war against an array of combatanta and keep the Lonely Mountain from falling into the hands of a rising
Delete:

db.movies.deleteOne({title:"Avatar"})
{ acknowledged: true, deletedCount: 1 }
db.movies.deleteOne({title:"Pee Wee Herman's Big Adventur"})
{ acknowledged: true, deletedCount: 0 }

Users Collection:

Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
Users Collection:
Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
db.users.insertMany([{username:"GoodGuyGreg",first_name:"GoodGuy",last_name:"Gerg"},{username:"ScumbagSteve",full_name:["first:Scumbag","last:steve"]}])
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("628c80e46387fffdf47d5275"),
     '1': ObjectId("628c80e46387fffdf47d5276") } }
db.users.find()
{ _id: ObjectId("628c80e46387fffdf47d5275"),
  username: 'GoodGuyGreg',
  first_name: 'GoodGuy',
  last_name: 'Gerg' }
{ _id: ObjectId("628c80e46387fffdf47d5276"),
  username: 'ScumbagSteve',
  full_name: [ 'first:Scumbag', 'last:steve' ] }
db.posts.insertMany([{username:"GoodGuyGreg",title:"Passes out at party",body:"Wakes up early and cleans house"},{username:"GoodGuyGreg",title:"Reports a bug in your code",body:"Sends you a pull request"},{username:"ScumbagSteve",title:"Borrows something",body:"Sells it"},{username:"ScumbagSteve",title"Borrows everything",body:"The end"},{username:"ScumbagSteve",title:"Forks your repo on Github",body:"Sets to private"}])
Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
db.posts.insertMany([{username:"GoodGuyGreg",title:"Passes out at party",body:"Wakes up early and cleans house"},{username:"GoodGuyGreg",title:"Reports a bug in your code",body:"Sends you a pull request"},{username:"ScumbagSteve",title:"Borrows something",body:"Sells it"},{username:"ScumbagSteve",title"Borrows everything",body:"The end"},{username:"ScumbagSteve",title:"Forks your repo on Github",body:"Sets to private"}])
Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
db.posts.find()
db.posts.insertMany([{username:"GoodGuyGreg",title:"Passes out at party",body:"Wakes up early and cleans house"},{username:"GoodGuyGreg",title:"Reports a bug in your code",body:"Sends you a pull request"},{username:"ScumbagSteve",title:"Borrows something",body:"Sells it"},{username:"ScumbagSteve",title"Borrows everything",body:"The end"},{username:"ScumbagSteve",title:"Forks your repo on Github",body:"Sets to private"}])
Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);


db.po[12:46] Potnuru, Tejaswi
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);

sts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);

Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
])


db.po[12:46] Potnuru, Tejaswi
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);

sts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);

Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
])
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("628c87e16387fffdf47d5277"),
     '1': ObjectId("628c87e16387fffdf47d5278"),
     '2': ObjectId("628c87e16387fffdf47d5279"),
     '3': ObjectId("628c87e16387fffdf47d527a"),
     '4': ObjectId("628c87e16387fffdf47d527b"),
     '5': ObjectId("628c87e16387fffdf47d527c") } }
db.comments.insertMany([
{
username: "GoodGuyGreg",
comment: "Hope you got a good deal!",
post: ObjectId("5f44d3a148197d7749864def")
},
{
username: "GoodGuyGreg",
comment: "Don't violate the licensing agreement!",
post: ObjectId("5f44d3a148197d7749864df0")
},
{
username: "GoodGuyGreg",
comment: "Don't violate the licensing agreement!",
post: ObjectId("5f44d3a148197d7749864df1")
},
{
username: "ScumbagSteve",
comment: "It still isn't clean",
post: ObjectId("5f44d3a148197d7749864dec")
},
{
username: "ScumbagSteve",
comment: "Denied your PR cause I found a hack",
post: ObjectId("5f44d3a148197d7749864dee")
}])
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("628c889a6387fffdf47d527d"),
     '1': ObjectId("628c889a6387fffdf47d527e"),
     '2': ObjectId("628c889a6387fffdf47d527f"),
     '3': ObjectId("628c889a6387fffdf47d5280"),
     '4': ObjectId("628c889a6387fffdf47d5281") } }
db.users.find().pretty();
{ _id: ObjectId("628c80e46387fffdf47d5275"),
  username: 'GoodGuyGreg',
  first_name: 'GoodGuy',
  last_name: 'Gerg' }
{ _id: ObjectId("628c80e46387fffdf47d5276"),
  username: 'ScumbagSteve',
  full_name: [ 'first:Scumbag', 'last:steve' ] }
db.posts.find({ username: 'GoodGuyGreg' }).pretty();
{ _id: ObjectId("628c87e16387fffdf47d5277"),
  username: 'GoodGuyGreg',
  title: 'Passes out at party',
  body: 'Wakes up early and cleans house' }
{ _id: ObjectId("628c87e16387fffdf47d5278"),
  username: 'GoodGuyGreg',
  title: 'Steals your identity',
  body: 'Raises your credit score' }
{ _id: ObjectId("628c87e16387fffdf47d5279"),
  username: 'GoodGuyGreg',
  title: 'Reports a bug in your code',
  body: 'Sends you a Pull Request' }
db.comments.find().pretty();
{ _id: ObjectId("628c889a6387fffdf47d527d"),
  username: 'GoodGuyGreg',
  comment: 'Hope you got a good deal!',
  post: ObjectId("5f44d3a148197d7749864def") }
{ _id: ObjectId("628c889a6387fffdf47d527e"),
  username: 'GoodGuyGreg',
  comment: 'Don\'t violate the licensing agreement!',
  post: ObjectId("5f44d3a148197d7749864df0") }
{ _id: ObjectId("628c889a6387fffdf47d527f"),
  username: 'GoodGuyGreg',
  comment: 'Don\'t violate the licensing agreement!',
  post: ObjectId("5f44d3a148197d7749864df1") }
{ _id: ObjectId("628c889a6387fffdf47d5280"),
  username: 'ScumbagSteve',
  comment: 'It still isn\'t clean',
  post: ObjectId("5f44d3a148197d7749864dec") }
{ _id: ObjectId("628c889a6387fffdf47d5281"),
  username: 'ScumbagSteve',
  comment: 'Denied your PR cause I found a hack',
  post: ObjectId("5f44d3a148197d7749864dee") }
db.comments.find({ username: 'GoodGuyGreg' }).pretty();
{ _id: ObjectId("628c889a6387fffdf47d527d"),
  username: 'GoodGuyGreg',
  comment: 'Hope you got a good deal!',
  post: ObjectId("5f44d3a148197d7749864def") }
{ _id: ObjectId("628c889a6387fffdf47d527e"),
  username: 'GoodGuyGreg',
  comment: 'Don\'t violate the licensing agreement!',
  post: ObjectId("5f44d3a148197d7749864df0") }
{ _id: ObjectId("628c889a6387fffdf47d527f"),
  username: 'GoodGuyGreg',
  comment: 'Don\'t violate the licensing agreement!',
  post: ObjectId("5f44d3a148197d7749864df1") }
db.posts.aggregate([
{
$match: { title: 'Reports a bug in your code' }
},
{
$lookup: {
from: 'comments',
localField: '_id',
foreignField: 'post',
as: 'comments'
}
}
]).pretty();
{ _id: ObjectId("61b88227fe9204d66eef8250"),
  username: 'GoodGuyGreg',
  title: 'Reports a bug in your code',
  body: 'Sends you a Pull Request',
  comments: [] }
Error: clone(t={}){const r=t.loc||{};return e({loc:new Position("line"in r?r.line:this.loc.line,"column"in r?r.column:...<omitted>...)} could not be cloned.
db.posts.aggregate([
{
$match: { title: 'Reports a bug in your code' }
},
{
$lookup: {
from: 'comments',
localField: '_id',
foreignField: 'post',
as: 'comments'
}
}
]).pretty();
{ _id: ObjectId("61b88227fe9204d66eef8250"),
  username: 'GoodGuyGreg',
  title: 'Reports a bug in your code',
  body: 'Sends you a Pull Request',
  comments: [] }
